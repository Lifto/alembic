from sqlalchemy import MetaData, Column, Table, Integer, String, Text, \
    Numeric, CHAR, ForeignKey, DATETIME
from alembic import autogenerate, context
from unittest import TestCase
from tests import staging_env, sqlite_db, clear_staging_env, eq_, eq_ignore_whitespace

def _model_one():
    m = MetaData()

    Table('user', m,
        Column('id', Integer, primary_key=True),
        Column('name', String(50)),
        Column('a1', Text),
        Column("pw", String(50))
    )

    Table('address', m,
        Column('id', Integer, primary_key=True),
        Column('email_address', String(100), nullable=False),
    )

    Table('order', m,
        Column('order_id', Integer, primary_key=True),
        Column("amount", Numeric(8, 2), nullable=False)
    )

    Table('extra', m,
        Column("x", CHAR)
    )

    return m

def _model_two():
    m = MetaData()

    Table('user', m,
        Column('id', Integer, primary_key=True),
        Column('name', String(50), nullable=False),
        Column('a1', Text),
    )

    Table('address', m,
        Column('id', Integer, primary_key=True),
        Column('email_address', String(100), nullable=False),
        Column('street', String(50))
    )

    Table('order', m,
        Column('order_id', Integer, primary_key=True),
        Column("amount", Numeric(10, 2), nullable=True)
    )

    Table('item', m, 
        Column('id', Integer, primary_key=True),
        Column('description', String(100))
    )
    return m

class AutogenerateDiffTest(TestCase):
    @classmethod
    def setup_class(cls):
        staging_env()
        cls.bind = sqlite_db()
        cls.m1 = _model_one()
        cls.m1.create_all(cls.bind)

    @classmethod
    def teardown_class(cls):
        clear_staging_env()

    def test_diffs(self):
        """test generation of diff rules"""

        metadata = _model_two()
        connection = self.bind.connect()
        diffs = []
        autogenerate._produce_net_changes(connection, metadata, diffs)
        extra = diffs[1][1]
        eq_(extra.name, "extra")
        del diffs[1]

        dropcol = diffs[1][2]
        del diffs[1]
        eq_(dropcol.name, "pw")
        eq_(dropcol.nullable, True)
        eq_(dropcol.type._type_affinity, String)
        eq_(dropcol.type.length, 50)

        eq_(repr(diffs[2][3]), "NUMERIC(precision=8, scale=2)")
        eq_(repr(diffs[2][4]), "Numeric(precision=10, scale=2)")
        del diffs[2]
        eq_(
            diffs,
            [
                ('add_table', metadata.tables['item']), 
                ('modify_nullable', 'user', 'name', True, False), 
                ('modify_nullable', 'order', u'amount', False, True), 
                ('add_column', 'address', 
                        metadata.tables['address'].c.street)
            ]
        )

    def test_render_diffs(self):
        """test a full render including indentation"""

        metadata = _model_two()
        connection = self.bind.connect()
        template_args = {}
        context.configure(
            connection=connection, 
            autogenerate_metadata=metadata)
        autogenerate.produce_migration_diffs(template_args)
        eq_(template_args['upgrades'],
"""### commands auto generated by Alembic - please adjust! ###
    create_table('item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    drop_table(u'extra')
    drop_column('user', u'pw')
    alter_column('user', 'name', nullable=False)
    alter_column('order', u'amount', type=sa.Numeric(precision=10, scale=2))
    alter_column('order', u'amount', nullable=True)
    add_column('address', sa.Column('street', sa.String(length=50), nullable=True))
    ### end Alembic commands ###""")
        eq_(template_args['downgrades'],
"""### commands auto generated by Alembic - please adjust! ###
    drop_table('item')
    create_table(u'extra',
    sa.Column(u'x', sa.CHAR(), nullable=True),
    sa.PrimaryKeyConstraint()
    )
    add_column('user', sa.Column(u'pw', sa.VARCHAR(length=50), nullable=True))
    alter_column('user', 'name', nullable=True)
    alter_column('order', u'amount', type=sa.NUMERIC(precision=8, scale=2))
    alter_column('order', u'amount', nullable=False)
    drop_column('address', 'street')
    ### end Alembic commands ###""")

class AutogenRenderTest(TestCase):
    """test individual directives"""

    @classmethod
    def setup_class(cls):
        context._context_opts['autogenerate_sqlalchemy_prefix'] = 'sa.'

    def test_render_table_upgrade(self):
        m = MetaData()
        t = Table('test', m,
            Column('id', Integer, primary_key=True),
            Column("address_id", Integer, ForeignKey("address.id")),
            Column("timestamp", DATETIME, server_default="NOW()"),
            Column("amount", Numeric(5, 2)),
        )
        eq_ignore_whitespace(
            autogenerate._add_table(t),
            "create_table('test',"
            "sa.Column('id', sa.Integer(), nullable=False),"
            "sa.Column('address_id', sa.Integer(), nullable=True),"
            "sa.Column('timestamp', sa.DATETIME(), "
                "server_default=sa.DefaultClause('NOW()'), "
                "nullable=True),"
            "sa.Column('amount', sa.Numeric(precision=5, scale=2), nullable=True),"
            "sa.ForeignKeyConstraint([address_id], ['address.id'], ),"
            "sa.PrimaryKeyConstraint('id')"
            ")"
        )

    def test_render_drop_table(self):
        eq_(
            autogenerate._drop_table(Table("sometable", MetaData())),
            "drop_table('sometable')"
        )

    def test_render_add_column(self):
        eq_(
            autogenerate._add_column(
                    "foo", Column("x", Integer, server_default="5")),
            "add_column('foo', sa.Column('x', sa.Integer(), "
                "server_default=sa.DefaultClause('5'), nullable=True))"
        )

    def test_render_drop_column(self):
        eq_(
            autogenerate._drop_column(
                    "foo", Column("x", Integer, server_default="5")),
            "drop_column('foo', 'x')"
        )

    def test_render_modify_type(self):
        eq_(
            autogenerate._modify_type(
                        "sometable", "somecolumn", CHAR(10)),
            "alter_column('sometable', 'somecolumn', type=sa.CHAR(length=10))"
        )

    def test_render_modify_nullable(self):
        eq_(
            autogenerate._modify_nullable(
                        "sometable", "somecolumn", True),
            "alter_column('sometable', 'somecolumn', nullable=True)"
        )
