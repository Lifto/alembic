from sqlalchemy import MetaData, Column, Table, Integer, String, Text, \
    Numeric, CHAR, NUMERIC, ForeignKey, DATETIME
from alembic import autogenerate
from unittest import TestCase
from tests import staging_env, sqlite_db, clear_staging_env, eq_, eq_ignore_whitespace

def _model_one():
    m = MetaData()

    Table('user', m,
        Column('id', Integer, primary_key=True),
        Column('name', String(50)),
        Column('a1', Text),
        Column("pw", String(50))
    )

    Table('address', m,
        Column('id', Integer, primary_key=True),
        Column('email_address', String(100), nullable=False),
    )

    Table('order', m,
        Column('order_id', Integer, primary_key=True),
        Column("amount", Numeric(8, 2), nullable=False)
    )

    Table('extra', m,
        Column("x", CHAR)
    )

    return m

def _model_two():
    m = MetaData()

    Table('user', m,
        Column('id', Integer, primary_key=True),
        Column('name', String(50), nullable=False),
        Column('a1', Text),
    )

    Table('address', m,
        Column('id', Integer, primary_key=True),
        Column('email_address', String(100), nullable=False),
        Column('street', String(50))
    )

    Table('order', m,
        Column('order_id', Integer, primary_key=True),
        Column("amount", Numeric(10, 2), nullable=True)
    )

    Table('item', m, 
        Column('id', Integer, primary_key=True),
        Column('description', String(100))
    )
    return m

class AutogenerateDiffTest(TestCase):
    @classmethod
    def setup_class(cls):
        env = staging_env()
        cls.bind = sqlite_db()
        cls.m1 = _model_one()
        cls.m1.create_all(cls.bind)

    @classmethod
    def teardown_class(cls):
        clear_staging_env()

    def test_diffs(self):
        metadata = _model_two()
        connection = self.bind.connect()
        diffs = []
        autogenerate._produce_net_changes(connection, metadata, diffs)
        extra = diffs[1][1]
        eq_(extra.name, "extra")
        del diffs[1]
        eq_(repr(diffs[3][3]), "NUMERIC(precision=8, scale=2)")
        eq_(repr(diffs[3][4]), "Numeric(precision=10, scale=2)")
        del diffs[3]
        eq_(
            diffs,
            [
                ('add_table', metadata.tables['item']), 
                ('remove_column', 'user', u'pw'), 
                ('modify_nullable', 'user', 'name', True, False), 
                ('modify_nullable', 'order', u'amount', False, True), 
                ('add_column', 'address', 
                        metadata.tables['address'].c.street)
            ]
        )

class AutogenRenderTest(TestCase):
    def test_render_table_upgrade(self):
        m = MetaData()
        t = Table('test', m,
            Column('id', Integer, primary_key=True),
            Column("address_id", Integer, ForeignKey("address.id")),
            Column("timestamp", DATETIME, server_default="NOW()"),
            Column("amount", Numeric(5, 2)),
        )
        eq_ignore_whitespace(
            autogenerate._add_table(t),
            "create_table('test', "
            "Column('id', Integer(), nullable=False),"
            "Column('address_id', Integer(), nullable=True),"
            "Column('timestamp', DATETIME(), "
                "server_default=DefaultClause('NOW()', for_update=False), "
                "nullable=True),"
            "Column('amount', Numeric(precision=5, scale=2), nullable=True),"
            "ForeignKeyConstraint([address_id], ['address.id'], ),"
            "PrimaryKeyConstraint(id)"
            " )"
        )

    def test_render_table_downgrade(self):
        eq_(
            autogenerate._drop_table("sometable"),
            "drop_table('sometable')"
        )

    def test_render_type_upgrade(self):
        eq_(
            autogenerate._modify_type(
                        "sometable", "somecolumn", CHAR(10)),
            "alter_column('sometable', 'somecolumn', type=CHAR(length=10))"
        )

    def test_render_nullable_upgrade(self):
        eq_(
            autogenerate._modify_nullable(
                        "sometable", "somecolumn", True),
            "alter_column('sometable', 'somecolumn', nullable=True)"
        )
